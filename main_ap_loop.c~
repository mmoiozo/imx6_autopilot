#include <stdio.h>
#include <unistd.h>
#include <time.h>
#include <gst/gst.h>
#include <glib.h>
#include <fcntl.h>		//Used for UART
#include <termios.h>		//Used for UART
#include <errno.h>
//#include <linux/i2c-dev.h> //i2c
//#include <read_sensors.h> //initializing and reading i2c sensors
//#include <serial_com.h> //initializing uart

//#define MPU_ADDR 0x69//b1101001 (pin AD0 is logic high)
//#define BMP_ADDR 0x77// 1110111
//#define HMC_ADDR 0x1E

int loop_status = 1;

static gboolean bus_call (GstBus *bus, GstMessage *msg)
{
  switch (GST_MESSAGE_TYPE (msg)) {
 
    case GST_MESSAGE_EOS:
      g_print ("End of stream\n");
      loop_status = 0;
      break;
 
    case GST_MESSAGE_ERROR: {
      gchar  *debug;
      GError *error;
 
      gst_message_parse_error (msg, &error, &debug);
      g_free (debug);
 
      g_printerr ("Error: %s\n", error->message);
      g_error_free (error);
 
      loop_status = 0;
      break;
    }
    default:
      break;
  }
 
  return TRUE;
}

 static gboolean
 link_elements_with_filter (GstElement*element1, GstElement*element2)
  {
 gboolean link_ok;
 GstCaps*caps;
 caps = gst_caps_new_simple ("video/x-raw",
 "format", G_TYPE_STRING, "I420",
 "width", G_TYPE_INT, 960,
 "height", G_TYPE_INT, 720,
 "framerate", GST_TYPE_FRACTION, 30, 1,NULL);

 link_ok = gst_element_link_filtered (element1, element2, caps);
 gst_caps_unref (caps);
 if (!link_ok) {
  g_warning ("Failed to link element1 and element2!");
  }
 return link_ok;
}


int main (int   argc, char*argv[])

{

 int a = 0;
 int last = 0;
 struct timeval start, stop;
 double last_time = 0;
 double elapsed_long = 0;
 const gchar* nano_str;

//i2c
/*
 char buffer[1];
 char gyro_buffer[14];
 int fd;
*/
//gstreamer initialization 
GstElement *pipeline, *videosrc, *srcq, *videoenc, *encq, *parse, *rtp, *sink;

GstBus *g_bus;
GstMessage *msg;

 guint major, minor, micro, nano;

 gst_init (&argc, &argv);

 gst_version (&major, &minor, &micro, &nano);

 if (nano == 1)
   nano_str = "(CVS)";
 else if (nano == 2)
   nano_str = "(Prerelease)";
 else
   nano_str = "";
   printf ("This program is linked against GStreamer %d.%d.%d %s\n",major, minor, micro, nano_str);

  /* Create gstreamer elements */
  pipeline = gst_pipeline_new ("video_testsrc");
  videosrc = gst_element_factory_make ("videotestsrc", "videosrc");
  srcq = gst_element_factory_make ("queue", "srcq");
  videoenc = gst_element_factory_make ("imxvpuenc_h264", "videoenc");
  encq = gst_element_factory_make ("queue", "encq");
  parse = gst_element_factory_make ("h264parse", "parse");
  rtp = gst_element_factory_make ("rtph264pay", "rtp");
  sink = gst_element_factory_make ("udpsink", "sink");
 
  if (!pipeline || !videosrc || !srcq || !videoenc
    || !encq || !parse || !rtp || !sink) {
    g_printerr ("One element could not be created. Exiting.\n");
    return -1;
  }

  g_object_set (G_OBJECT (sink), "port", 5000,"host", "192.168.2.5", NULL);
  g_object_set (G_OBJECT (videosrc),"pattern", "smpte", "horizontal-speed", 1, NULL);
  g_object_set (G_OBJECT (videoenc),"idr-interval", 16 ,"quant-param" ,20 , NULL);


 g_bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));

  /* we add all elements into the pipeline */
  gst_bin_add_many (GST_BIN (pipeline), videosrc, srcq, videoenc, encq, parse, rtp, sink, NULL);
 
  /* we link the elements together */
  if(!link_elements_with_filter(videosrc, srcq))
	{
        g_printerr ("Videosrc and srcq could not be linked.\n");
        return -1;
	}
  gst_element_link_many (srcq, videoenc, encq, parse, rtp, sink, NULL);
 /* Set the pipeline to "playing" state*/
  g_print ("Streaming to port: %s\n", argv[1]);
  gst_element_set_state (pipeline, GST_STATE_PLAYING);

	//UART initialisation
	uart_init();

	//i2c intialisation
	int x=0;
 	initialize_sensors(&x); /* function call*/
 	printf("Sensors connected: %d \n",x);
	
	/*
	fd = open("/dev/i2c-2", O_RDWR);

	if (fd < 0) {
		printf("Error opening file: %s\n", strerror(errno));
		return 1;
	}

	if (ioctl(fd, I2C_SLAVE, MPU_ADDR) < 0) {
		printf("ioctl error: %s\n", strerror(errno));
		return 1;
	}

	buffer[0]=117;
	write(fd, buffer, 1);
	
	read(fd, buffer, 1);
	if(buffer[0] == 0x68){
	printf("MPU 6050 IMU connected 0x%02X\n", buffer[0]);
	}
	if (ioctl(fd, I2C_SLAVE, MPU_ADDR) < 0) {
		printf("ioctl error: %s\n", strerror(errno));
		return 1;
	}

	gyro_buffer[0]=0x6B;
	gyro_buffer[1]=0x00;
	write(fd, gyro_buffer, 2);


	if (ioctl(fd, I2C_SLAVE, BMP_ADDR) < 0) {
		printf("ioctl error: %s\n", strerror(errno));
		return 1;
	}

	buffer[0]=0xD0;
	write(fd, buffer, 1);
	
	read(fd, buffer, 1);
	if(buffer[0] == 0x55){
	printf("BMP 180 pressure sensor connected 0x%02X\n", buffer[0]);
	}

	if (ioctl(fd, I2C_SLAVE, HMC_ADDR) < 0) {
		printf("ioctl error: %s\n", strerror(errno));
		return 1;
	}

	buffer[0]=10;//idenification regiser A 
	write(fd, buffer, 1);
	
	read(fd, buffer, 1);
	if(buffer[0] == 0x48){//ansci value h = 01001000 0x48
	printf("HMC 5883l sensor connected 0x%02X\n", buffer[0]);
	}
*/

 gettimeofday(&start, 0);
 double prev_time = start.tv_sec + (double)(start.tv_usec / 1000000.0);

 while(loop_status == 1)
   {
      
      a++;
	gettimeofday(&stop, 0);
	double curr_time =  (double)(stop.tv_sec + stop.tv_usec/1000000.0);
        double elapsed = curr_time - (double)(start.tv_sec + start.tv_usec/1000000.0);
	gettimeofday(&start, 0);
	elapsed_long = curr_time - last_time;


	if(elapsed_long > 0.1)
	{
	float loop_rate = (a - last)/elapsed_long;
	last = a;
	last_time = (double)(start.tv_sec + start.tv_usec/1000000.0);

	//UART Send
	uart_send();

	//usleep(10);
	
	//UART Read
	uart_read();
	
	/*
	if (ioctl(fd, I2C_SLAVE, MPU_ADDR) < 0) {
		printf("ioctl error: %s\n", strerror(errno));
		return 1;
	}

	gyro_buffer[0]=0x3B;
	write(fd, gyro_buffer, 1);
	
	read(fd, gyro_buffer, 14);
	//int x_rate = gyro_buffer[1] + (gyro_buffer[0] >> 8);
	int16_t x_acc = (((int16_t)gyro_buffer[0]) << 8) | gyro_buffer[1];
	int16_t y_acc = (((int16_t)gyro_buffer[2]) << 8) | gyro_buffer[3];
	int16_t z_acc = (((int16_t)gyro_buffer[4]) << 8) | gyro_buffer[5];
	int16_t mpu_temp = (((int16_t)gyro_buffer[6]) << 8) | gyro_buffer[7];
	int16_t x_rate = (((int16_t)gyro_buffer[8]) << 8) | gyro_buffer[9];
	int16_t y_rate = (((int16_t)gyro_buffer[10]) << 8) | gyro_buffer[11];
	int16_t z_rate = (((int16_t)gyro_buffer[12]) << 8) | gyro_buffer[13];
	printf("Gyro rate X: %d Y: %d Z: %d\n",x_rate,y_rate,z_rate);
	printf("Accelerometer acceleration X: %d Y: %d Z: %d\n",x_acc,y_acc,z_acc);
	
	*/


        printf("Elapsed long: %f Loop rate HZ: %f current time %f \n", elapsed_long,loop_rate , curr_time);
	}
	
	//HERE MAIN LOOP CODE


	//END MAIN LOOP CODE

          // See if we have pending messages on the bus and handle them
        while ((msg = gst_bus_pop (g_bus))) 
	{
          // Call your bus message handler
          bus_call (g_bus, msg);
          gst_message_unref (msg); 
	}
      usleep(2000);
     
   }

 /*Out of the main loop, clean up nicely*/
 g_print ("Returned, stopping playback\n");
 gst_element_set_state (pipeline, GST_STATE_NULL);
 g_print ("Deleting pipeline\n");
 gst_object_unref (GST_OBJECT (pipeline));
 gst_object_unref (g_bus);


 return 0;
}
